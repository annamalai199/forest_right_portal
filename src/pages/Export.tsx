import { useState } from 'react';
import { motion } from 'framer-motion';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { useAuth } from '@/contexts/AuthContext';
import { useToast } from '@/hooks/use-toast';
import jsPDF from 'jspdf';
import Papa from 'papaparse';
import { 
  Download, 
  FileText, 
  Table, 
  FileSpreadsheet,
  Filter,
  Calendar,
  Users,
  MapPin,
  BarChart3,
  CheckCircle,
  AlertCircle
} from 'lucide-react';

export const Export = () => {
  const { user } = useAuth();
  const { toast } = useToast();
  const [selectedFormat, setSelectedFormat] = useState('pdf');
  const [selectedData, setSelectedData] = useState('claims');
  const [dateRange, setDateRange] = useState('2024');
  const [isExporting, setIsExporting] = useState(false);
  const [includeCharts, setIncludeCharts] = useState(true);
  const [includeStats, setIncludeStats] = useState(true);

  // Mock data for exports
  const claimsData = [
    {
      claimId: 'FRA/CGH/BST/2024/001',
      beneficiary: 'Ramesh Kumar',
      village: 'Kondagaon',
      district: 'Bastar',
      landArea: 2.5,
      status: 'Approved',
      submittedDate: '2024-01-15',
      approvedDate: '2024-02-20'
    },
    {
      claimId: 'FRA/CGH/BST/2024/002',
      beneficiary: 'Sunita Devi',
      village: 'Tokapal',
      district: 'Bastar',
      landArea: 1.8,
      status: 'Pending',
      submittedDate: '2024-02-10',
      approvedDate: ''
    },
    {
      claimId: 'FRA/CGH/BST/2024/003',
      beneficiary: 'Mohan Lal',
      village: 'Bhanupratappur',
      district: 'Kanker',
      landArea: 3.2,
      status: 'Approved',
      submittedDate: '2024-01-25',
      approvedDate: '2024-03-05'
    }
  ];

  const analyticsData = [
    { metric: 'Total Claims', value: 156, change: '+12%' },
    { metric: 'Approved Claims', value: 89, change: '+8%' },
    { metric: 'Pending Claims', value: 42, change: '+15%' },
    { metric: 'Rejected Claims', value: 25, change: '-5%' },
    { metric: 'Land Approved (acres)', value: 245.8, change: '+18%' }
  ];

  const exportOptions = [
    {
      id: 'claims',
      name: 'FRA Claims Data',
      description: 'Complete claims database with status and beneficiary details',
      icon: FileText,
      records: claimsData.length,
      access: ['user', 'officer', 'admin']
    },
    {
      id: 'analytics',
      name: 'Analytics Report',
      description: 'Statistical analysis and performance metrics',
      icon: BarChart3,
      records: analyticsData.length,
      access: ['officer', 'admin']
    },
    {
      id: 'beneficiaries',
      name: 'Beneficiary List',
      description: 'Approved beneficiaries with land allocation details',
      icon: Users,
      records: 89,
      access: ['officer', 'admin']
    },
    {
      id: 'geographic',
      name: 'Geographic Data',
      description: 'Village-wise and district-wise distribution',
      icon: MapPin,
      records: 28,
      access: ['admin']
    }
  ];

  const getAccessibleOptions = () => {
    return exportOptions.filter(option => 
      option.access.includes(user?.role || 'user')
    );
  };

  const generatePDF = () => {
    const pdf = new jsPDF();
    const pageWidth = pdf.internal.pageSize.getWidth();
    
    // Header
    pdf.setFontSize(20);
    pdf.text('FRA Atlas Portal - Export Report', pageWidth / 2, 20, { align: 'center' });
    
    pdf.setFontSize(12);
    pdf.text(`Generated by: ${user?.name} (${user?.role?.toUpperCase()})`, 20, 35);
    pdf.text(`Date: ${new Date().toLocaleDateString()}`, 20, 45);
    pdf.text(`Report Type: ${selectedData.toUpperCase()}`, 20, 55);
    
    let yPosition = 75;
    
    if (selectedData === 'claims') {
      pdf.setFontSize(16);
      pdf.text('FRA Claims Summary', 20, yPosition);
      yPosition += 15;
      
      // Table headers
      pdf.setFontSize(10);
      pdf.text('Claim ID', 20, yPosition);
      pdf.text('Beneficiary', 60, yPosition);
      pdf.text('Village', 100, yPosition);
      pdf.text('Area', 130, yPosition);
      pdf.text('Status', 155, yPosition);
      
      yPosition += 10;
      
      // Table data
      claimsData.forEach((claim) => {
        if (yPosition > 270) {
          pdf.addPage();
          yPosition = 20;
        }
        
        pdf.text(claim.claimId, 20, yPosition);
        pdf.text(claim.beneficiary, 60, yPosition);
        pdf.text(claim.village, 100, yPosition);
        pdf.text(`${claim.landArea}`, 130, yPosition);
        pdf.text(claim.status, 155, yPosition);
        
        yPosition += 8;
      });
    }
    
    if (selectedData === 'analytics' && includeStats) {
      pdf.addPage();
      pdf.setFontSize(16);
      pdf.text('Analytics Summary', 20, 30);
      
      yPosition = 50;
      analyticsData.forEach((item) => {
        pdf.setFontSize(12);
        pdf.text(`${item.metric}: ${item.value} (${item.change})`, 20, yPosition);
        yPosition += 15;
      });
    }
    
    // Footer
    const totalPages = (pdf as any).internal.getNumberOfPages();
    for (let i = 1; i <= totalPages; i++) {
      pdf.setPage(i);
      pdf.setFontSize(8);
      pdf.text(`Page ${i} of ${totalPages}`, pageWidth - 30, 290);
      pdf.text('Â© FRA Atlas Portal - Government of India', 20, 290);
    }
    
    return pdf;
  };

  const generateCSV = () => {
    let data = [];
    
    if (selectedData === 'claims') {
      data = claimsData;
    } else if (selectedData === 'analytics') {
      data = analyticsData;
    }
    
    return Papa.unparse(data);
  };

  const handleExport = async () => {
    setIsExporting(true);
    
    try {
      // Simulate processing time
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      if (selectedFormat === 'pdf') {
        const pdf = generatePDF();
        pdf.save(`FRA-${selectedData}-${dateRange}.pdf`);
      } else if (selectedFormat === 'csv') {
        const csv = generateCSV();
        const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        const url = URL.createObjectURL(blob);
        link.setAttribute('href', url);
        link.setAttribute('download', `FRA-${selectedData}-${dateRange}.csv`);
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
      }
      
      toast({
        title: 'Export Successful',
        description: `${selectedData.toUpperCase()} data exported as ${selectedFormat.toUpperCase()}`,
      });
    } catch (error) {
      toast({
        title: 'Export Failed',
        description: 'There was an error exporting the data. Please try again.',
        variant: 'destructive',
      });
    } finally {
      setIsExporting(false);
    }
  };

  const accessibleOptions = getAccessibleOptions();

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.3 }}
      className="container mx-auto px-4 py-8"
    >
      <div className="space-y-6">
        {/* Header */}
        <div className="bg-gradient-card rounded-lg p-6 border border-border">
          <h1 className="text-3xl font-bold gov-heading flex items-center space-x-3 mb-2">
            <Download className="w-8 h-8 text-primary" />
            <span>Data Export Center</span>
          </h1>
          <p className="text-muted-foreground">
            Export FRA data and reports in PDF or CSV format
          </p>
          <div className="flex items-center space-x-2 mt-3">
            <Badge className="bg-primary text-primary-foreground">
              {user?.role?.toUpperCase()} ACCESS
            </Badge>
            <span className="text-sm text-muted-foreground">
              {user?.role === 'user' ? 'Personal data only' : 
               user?.role === 'officer' ? 'District-level data' : 
               'State-level data'}
            </span>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Export Configuration */}
          <div className="lg:col-span-2 space-y-6">
            {/* Data Selection */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Filter className="w-5 h-5" />
                  <span>Select Data to Export</span>
                </CardTitle>
                <CardDescription>Choose the type of data you want to export</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {accessibleOptions.map((option) => {
                  const Icon = option.icon;
                  return (
                    <div
                      key={option.id}
                      className={`p-4 border rounded-lg cursor-pointer transition-all ${
                        selectedData === option.id
                          ? 'border-primary bg-primary/5'
                          : 'border-border hover:border-primary/50'
                      }`}
                      onClick={() => setSelectedData(option.id)}
                    >
                      <div className="flex items-start space-x-3">
                        <Icon className="w-6 h-6 text-primary mt-1" />
                        <div className="flex-1">
                          <div className="flex items-center justify-between">
                            <h3 className="font-semibold">{option.name}</h3>
                            <Badge variant="secondary">{option.records} records</Badge>
                          </div>
                          <p className="text-sm text-muted-foreground mt-1">
                            {option.description}
                          </p>
                        </div>
                      </div>
                    </div>
                  );
                })}
              </CardContent>
            </Card>

            {/* Format & Options */}
            <Card>
              <CardHeader>
                <CardTitle>Export Format & Options</CardTitle>
                <CardDescription>Configure your export settings</CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-3">
                    <label className="text-sm font-medium">Export Format</label>
                    <Select value={selectedFormat} onValueChange={setSelectedFormat}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="pdf">
                          <div className="flex items-center space-x-2">
                            <FileText className="w-4 h-4" />
                            <span>PDF Report</span>
                          </div>
                        </SelectItem>
                        <SelectItem value="csv">
                          <div className="flex items-center space-x-2">
                            <FileSpreadsheet className="w-4 h-4" />
                            <span>CSV Data</span>
                          </div>
                        </SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="space-y-3">
                    <label className="text-sm font-medium">Date Range</label>
                    <Select value={dateRange} onValueChange={setDateRange}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="2024">Year 2024</SelectItem>
                        <SelectItem value="2023">Year 2023</SelectItem>
                        <SelectItem value="all">All Years</SelectItem>
                        <SelectItem value="custom">Custom Range</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                {selectedFormat === 'pdf' && (
                  <div className="space-y-4">
                    <h4 className="font-medium">PDF Options</h4>
                    <div className="space-y-3">
                      <div className="flex items-center space-x-2">
                        <Checkbox
                          id="charts"
                          checked={includeCharts}
                          onCheckedChange={(checked) => setIncludeCharts(checked === true)}
                        />
                        <label htmlFor="charts" className="text-sm">Include charts and graphs</label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Checkbox
                          id="stats"
                          checked={includeStats}
                          onCheckedChange={(checked) => setIncludeStats(checked === true)}
                        />
                        <label htmlFor="stats" className="text-sm">Include statistical summary</label>
                      </div>
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>

          {/* Preview & Export */}
          <div className="space-y-6">
            {/* Export Preview */}
            <Card>
              <CardHeader>
                <CardTitle>Export Preview</CardTitle>
                <CardDescription>Review your export configuration</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-3">
                  <div className="flex justify-between">
                    <span className="text-sm text-muted-foreground">Data Type:</span>
                    <span className="text-sm font-medium">{selectedData.toUpperCase()}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm text-muted-foreground">Format:</span>
                    <span className="text-sm font-medium">{selectedFormat.toUpperCase()}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm text-muted-foreground">Date Range:</span>
                    <span className="text-sm font-medium">{dateRange}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm text-muted-foreground">Records:</span>
                    <span className="text-sm font-medium">
                      {accessibleOptions.find(opt => opt.id === selectedData)?.records || 0}
                    </span>
                  </div>
                </div>

                <div className="pt-4 border-t">
                  <Button 
                    onClick={handleExport}
                    disabled={isExporting}
                    className="w-full"
                  >
                    {isExporting ? (
                      <>Processing...</>
                    ) : (
                      <>
                        <Download className="w-4 h-4 mr-2" />
                        Export {selectedFormat.toUpperCase()}
                      </>
                    )}
                  </Button>
                </div>
              </CardContent>
            </Card>

            {/* Export History */}
            <Card>
              <CardHeader>
                <CardTitle>Recent Exports</CardTitle>
                <CardDescription>Your recent export history</CardDescription>
              </CardHeader>
              <CardContent className="space-y-3">
                {[
                  { file: 'FRA-claims-2024.pdf', date: '2024-03-15', status: 'success' },
                  { file: 'FRA-analytics-2024.csv', date: '2024-03-10', status: 'success' },
                  { file: 'FRA-beneficiaries-2024.pdf', date: '2024-03-05', status: 'success' }
                ].map((export_, index) => (
                  <div key={index} className="flex items-center justify-between p-3 bg-muted/50 rounded-lg">
                    <div>
                      <p className="text-sm font-medium">{export_.file}</p>
                      <p className="text-xs text-muted-foreground">{export_.date}</p>
                    </div>
                    <CheckCircle className="w-4 h-4 text-success" />
                  </div>
                ))}
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </motion.div>
  );
};